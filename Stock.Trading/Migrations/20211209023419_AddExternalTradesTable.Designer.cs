// <auto-generated />
using System;
using MatchingEngine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Stock.Trading.Migrations
{
    [DbContext(typeof(TradingDbContext))]
    [Migration("20211209023419_AddExternalTradesTable")]
    partial class AddExternalTradesTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("MatchingEngine.Models.Ask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Blocked")
                        .HasColumnType("numeric");

                    b.Property<int>("ClientType")
                        .HasColumnType("integer");

                    b.Property<string>("CurrencyPairCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Exchange")
                        .HasColumnType("integer");

                    b.Property<decimal>("Fulfilled")
                        .HasColumnType("numeric");

                    b.Property<bool?>("IsActive2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean");

                    b.Property<int>("LiquidityBlocksCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Asks");
                });

            modelBuilder.Entity("MatchingEngine.Models.Bid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Blocked")
                        .HasColumnType("numeric");

                    b.Property<int>("ClientType")
                        .HasColumnType("integer");

                    b.Property<string>("CurrencyPairCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Exchange")
                        .HasColumnType("integer");

                    b.Property<decimal>("Fulfilled")
                        .HasColumnType("numeric");

                    b.Property<bool?>("IsActive2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean");

                    b.Property<int>("LiquidityBlocksCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("MatchingEngine.Models.Deal", b =>
                {
                    b.Property<Guid>("DealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BidId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FromInnerTradingBot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSentToDealEnding")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric");

                    b.HasKey("DealId");

                    b.HasIndex("AskId");

                    b.HasIndex("BidId");

                    b.HasIndex("FromInnerTradingBot");

                    b.HasIndex("IsSentToDealEnding");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("MatchingEngine.Models.DealCopy", b =>
                {
                    b.Property<Guid>("DealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BidId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FromInnerTradingBot")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric");

                    b.HasKey("DealId");

                    b.ToTable("DealCopies");
                });

            modelBuilder.Entity("MatchingEngine.Models.MatchingExternalTrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BidId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid?>("DealId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBid")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AskId");

                    b.HasIndex("BidId");

                    b.ToTable("ExternalTrades");
                });

            modelBuilder.Entity("MatchingEngine.Models.OrderEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Blocked")
                        .HasColumnType("numeric");

                    b.Property<int>("ClientType")
                        .HasColumnType("integer");

                    b.Property<string>("CurrencyPairCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EventDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("EventDealIds")
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Exchange")
                        .HasColumnType("integer");

                    b.Property<decimal>("Fulfilled")
                        .HasColumnType("numeric");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSavedInMarketData")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSentToDealEnding")
                        .HasColumnType("boolean");

                    b.Property<int>("LiquidityBlocksCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EventId");

                    b.HasIndex("EventType");

                    b.HasIndex("IsSentToDealEnding");

                    b.ToTable("OrderEvents");
                });

            modelBuilder.Entity("MatchingEngine.Models.Deal", b =>
                {
                    b.HasOne("MatchingEngine.Models.Ask", "Ask")
                        .WithMany("DealList")
                        .HasForeignKey("AskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchingEngine.Models.Bid", "Bid")
                        .WithMany("DealList")
                        .HasForeignKey("BidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ask");

                    b.Navigation("Bid");
                });

            modelBuilder.Entity("MatchingEngine.Models.MatchingExternalTrade", b =>
                {
                    b.HasOne("MatchingEngine.Models.Ask", "Ask")
                        .WithMany()
                        .HasForeignKey("AskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchingEngine.Models.Bid", "Bid")
                        .WithMany()
                        .HasForeignKey("BidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ask");

                    b.Navigation("Bid");
                });

            modelBuilder.Entity("MatchingEngine.Models.Ask", b =>
                {
                    b.Navigation("DealList");
                });

            modelBuilder.Entity("MatchingEngine.Models.Bid", b =>
                {
                    b.Navigation("DealList");
                });
#pragma warning restore 612, 618
        }
    }
}
