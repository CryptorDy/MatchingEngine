// <auto-generated />
using System;
using MatchingEngine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Stock.Trading.Migrations
{
    [DbContext(typeof(TradingDbContext))]
    [Migration("20201001153439_AddOrderIsActive")]
    partial class AddOrderIsActive
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MatchingEngine.Models.Ask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Blocked");

                    b.Property<int>("ClientType");

                    b.Property<string>("CurrencyPairCode")
                        .IsRequired();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<int>("Exchange");

                    b.Property<decimal>("Fulfilled");

                    b.Property<bool?>("IsActiveOrder");

                    b.Property<bool>("IsBid");

                    b.Property<bool>("IsCanceled");

                    b.Property<int>("LiquidityBlocksCount");

                    b.Property<decimal>("Price");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Asks");
                });

            modelBuilder.Entity("MatchingEngine.Models.Bid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Blocked");

                    b.Property<int>("ClientType");

                    b.Property<string>("CurrencyPairCode")
                        .IsRequired();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<int>("Exchange");

                    b.Property<decimal>("Fulfilled");

                    b.Property<bool?>("IsActiveOrder");

                    b.Property<bool>("IsBid");

                    b.Property<bool>("IsCanceled");

                    b.Property<int>("LiquidityBlocksCount");

                    b.Property<decimal>("Price");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("MatchingEngine.Models.Deal", b =>
                {
                    b.Property<Guid>("DealId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AskId");

                    b.Property<Guid>("BidId");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<bool>("FromInnerTradingBot");

                    b.Property<bool>("IsSentToDealEnding");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("Volume");

                    b.HasKey("DealId");

                    b.HasIndex("AskId");

                    b.HasIndex("BidId");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("MatchingEngine.Models.OrderEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Blocked");

                    b.Property<int>("ClientType");

                    b.Property<string>("CurrencyPairCode")
                        .IsRequired();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset>("EventDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("EventDealIds");

                    b.Property<string>("EventType")
                        .IsRequired();

                    b.Property<int>("Exchange");

                    b.Property<decimal>("Fulfilled");

                    b.Property<Guid>("Id");

                    b.Property<bool>("IsBid");

                    b.Property<bool>("IsCanceled");

                    b.Property<bool>("IsSavedInMarketData");

                    b.Property<int>("LiquidityBlocksCount");

                    b.Property<decimal>("Price");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("EventId");

                    b.ToTable("OrderEvents");
                });

            modelBuilder.Entity("MatchingEngine.Models.Deal", b =>
                {
                    b.HasOne("MatchingEngine.Models.Ask", "Ask")
                        .WithMany("DealList")
                        .HasForeignKey("AskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MatchingEngine.Models.Bid", "Bid")
                        .WithMany("DealList")
                        .HasForeignKey("BidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
